<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AMicroblogAPI</name>
    </assembly>
    <members>
        <member name="T:AMicroblogAPI.Environment">
            <summary>
            Provides access to environmental variables, like current Access Token.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Environment.#cctor">
            <summary>
            Initializes the envrionment settings.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Environment.HandleResponseError(System.Object,AMicroblogAPI.Common.ResponseErrorEventArgs)">
            <summary>
            Handles the response error event.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Environment.ValidateAccessToken">
            <summary>
            Validates whether the current access token is null or not.
            </summary>
            <remarks><see cref="T:AMicroblogAPI.Common.AMicroblogException"/> is thrown if null.</remarks>
            <exception cref="T:AMicroblogAPI.Common.AMicroblogException">If the access token is null.</exception>
        </member>
        <member name="F:AMicroblogAPI.Environment.OAuthSignatureMethod">
            <summary>
            Gets or sets the OAuth signature method. Default to "HMAC-SHA1".
            </summary>
        </member>
        <member name="F:AMicroblogAPI.Environment.OAuthVersion">
            <summary>
            Gets or sets the OAuth version. Default to "1.0".
            </summary>
        </member>
        <member name="F:AMicroblogAPI.Environment.OAuthCallback">
            <summary>
            Gets or sets the OAuth callback. Default to "oob".
            </summary>
            <remarks>In a web application, consider overrides this field to a desired uri during the RequestToken call.</remarks>
        </member>
        <member name="M:AMicroblogAPI.Environment.NotifyResponseError(AMicroblogAPI.Common.ResponseErrorEventArgs)">
            <summary>
            Triggers the <see cref="E:AMicroblogAPI.Environment.ResponseError"/>.
            </summary>
            <remarks>To insure that each event handler has a chance to process the event, any exception is suspended.</remarks>
        </member>
        <member name="P:AMicroblogAPI.Environment.AppKey">
            <summary>
            Gets the app key configured in app.config.
            </summary>
            <remarks>In a web application, this field should be set manually each time a OAuth request is sent.</remarks>
        </member>
        <member name="P:AMicroblogAPI.Environment.AppSecret">
            <summary>
            Gets the app secret configured in app.config.
            </summary>
            <remarks>In a web application, this field should be set manually each time a OAuth request is sent.</remarks>
        </member>
        <member name="P:AMicroblogAPI.Environment.AccessToken">
            <summary>
            Gets the current access token generated after login.
            </summary>
            <remarks>
            This AccessToken is used to construct OAuth authorization header for all HTTP requests which requires OAuth authorization.
            By default, this token is set after a successful login.
            In web application, this field should be set manually each time a OAuth request is sent. In this case, consider stores the access token in session or somewhere after login.
            </remarks>
        </member>
        <member name="P:AMicroblogAPI.Environment.CurrentUserAccount">
            <summary>
            Gets the current login user's SINA account name.
            </summary>
        </member>
        <member name="E:AMicroblogAPI.Environment.ResponseError">
            <summary>
            Represents the event that a HTTP response comes back in error.
            </summary>
            <remarks>Exception in the event handlers of this event is not thrown.</remarks>
        </member>
        <member name="P:AMicroblogAPI.Environment.Configuration">
            <summary>
            Gets or sets the configuration of AMicroblogAPI.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Environment.ResponseErrorHandlingEnabled">
            <summary>
            Gets or sets a boolean value indicating whether response error handling is enabled.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Environment.ResponseErrorHandlers">
            <summary>
            Gets the eesponse error handlers.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.RelationshipPart">
            <summary>
            Represents a relationship part.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RelationshipPart.UserID">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RelationshipPart.ScreenName">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RelationshipPart.Following">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RelationshipPart.FollowedBy">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RelationshipPart.NotificationsEnabled">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.Common.ResponseErrorEventArgs">
            <summary>
            Represents the event args of ResponseError event.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.ResponseErrorEventArgs.#ctor(System.String,AMicroblogAPI.Common.AMicroblogException,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.Common.ResponseErrorEventArgs"/> with the specified parameters.
            </summary>
            <param name="requestUri">The request uri.</param>
            <param name="exception">The exception of <see cref="T:AMicroblogAPI.Common.AMicroblogException"/> type.</param>
            <param name="httpMethod">The request method.</param>
            <param name="contentType">The request content type.</param>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorEventArgs.ErrorData">
            <summary>
            Gets the contextual data of a HTTP response error.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorEventArgs.IsHandled">
            <summary>
            Gets or sets a boolean value indicating whether the exception is handled.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.AsyncCallResult`1">
            <summary>
            Represents the aync call result with the specified type of response data.
            </summary>
            <typeparam name="T">The type of the result data.</typeparam>
        </member>
        <member name="T:AMicroblogAPI.Common.AsyncCallResult">
            <summary>
            Represents the aync call result.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.AsyncCallResult.Success">
            <summary>
            Gets or sets a value indicates whether the call succeed.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.AsyncCallResult.Exception">
            <summary>
            Gets or sets the exception object if the call failed.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.AsyncCallResult`1.Data">
            <summary>
            The return result of the call.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.AMicroblogException">
            <summary>
            Represents the specific exception in AMicroblogAPI.
            </summary>
            <remarks>If it is a remote error, the <see cref="P:AMicroblogAPI.Common.AMicroblogException.IsRemoteError"/> is true and <see cref="P:AMicroblogAPI.Common.AMicroblogException.ErrorCode"/> is set.</remarks>
            <example>
            An remote error message is like: "40025:Error: repeated weibo text!". "40025" at the begining is a <see cref="P:AMicroblogAPI.Common.AMicroblogException.ErrorCode"/>.
            </example>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.Int32)">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.Int32,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.Int32,System.Exception)">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.String,System.Exception)">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.#ctor(System.Int32,System.String,System.Exception)">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.RetrieveErrorCode(System.String)">
            <summary>
            Retrieves the error code from the remoteErrorMessage.
            </summary>
            <param name="remoteErrorMessage">The error message from remote server.</param>
            <returns>The error code if retrieved; otherwise empty.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.AMicroblogException.GetLocalErrorMessage(System.Int32)">
            <summary>
            Retrieves a error message according to th specified error code.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>The error message.</returns>
        </member>
        <member name="P:AMicroblogAPI.Common.AMicroblogException.IsRemoteError">
            <summary>
            Gets or sets a boolean value indicating whether the exception is from the remote server.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.AMicroblogException.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.AMicroblogException.IsHandled">
            <summary>
            Gets or sets a boolean value indicating whether the exception is handled in previous exception handling process, like Unified Response Error Handling.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.TrendInfo">
            <summary>
            Represents a trend(topic).
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.TrendInfo.ID">
            <summary>
            Gets or sets the trend id.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.TrendInfo.HotWord">
            <summary>
            Gets or sets the hotword of the trend.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.TrendInfo.Hits">
            <summary>
            Gets or sets the number of hits the trend has.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.PeriodTrendInfo">
            <summary>
            Represents a trend(topic).
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PeriodTrendInfo.Name">
            <summary>
            Gets or sets the name of the trend.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PeriodTrendInfo.Query">
            <summary>
            Gets or sets the query of the trend.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.EmotionType">
            <summary>
            Represents the type of emotion.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.EmotionType.Image">
            <summary>
            Represents the image type of emotion
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.EmotionType.Magic">
            <summary>
            Represents the magic type of emotion
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.EmotionType.Cartoon">
            <summary>
            Represents the cartoon type of emotion
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.EmotionInfo">
            <summary>
            Represents the emotion info.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.EmotionInfo.Phrase">
            <summary>
            Gets or sets the phrase represents the emotion.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.EmotionInfo.Type">
            <summary>
            Gets or sets the type of the emotion.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.EmotionInfo.Url">
            <summary>
            Gets or sets the url of the emotion.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.EmotionInfo.IsHot">
            <summary>
            Gets or sets a boolean value indicating whether the emotion is popular.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.EmotionInfo.IsCommon">
            <summary>
            Gets or sets a boolean value indicating whether the emotion is common.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.EmotionInfo.OrderNumber">
            <summary>
            Gets or sets order numer of the emotion.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.EmotionInfo.Category">
            <summary>
            Gets or sets the category of the emotion.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Comments">
            <summary>
            Represents a set of comment.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Comments.Items">
            <summary>
            Gets the comments.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.ParamPair">
            <summary>
            Represents a Name/Value pair.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.ParamPair.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.Common.ParamPair"/>.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.ParamPair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.Common.ParamPair"/> with the name and value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AMicroblogAPI.Common.ParamPair.CompareTo(AMicroblogAPI.Common.ParamPair)">
            <summary>
            Compares current <c>ParamPair</c> object with another one.
            </summary>
            <param name="other">The other <c>ParamPair</c> to compare to.</param>
            <returns>The compare result.</returns>
        </member>
        <member name="P:AMicroblogAPI.Common.ParamPair.Name">
            <summary>
            Gets or sets the name field.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.ParamPair.Value">
            <summary>
            Gets or sets the value field.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.MultiPartField">
            <summary>
            Represents a muit-part field.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.MultiPartField.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.MultiPartField"/>.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.MultiPartField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.MultiPartField"/> with the specified <paramref name="name"/> and <paramref name="value"/>.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.MultiPartField.Name">
            <summary>
            Gets or sets the name of the multi-part field.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.MultiPartField.Value">
            <summary>
            Gets or sets the value of the multi-part field.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.MultiPartField.FilePath">
            <summary>
            Gets or sets the file path of the multi-part field it it is a file field.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UpdateProfileInfo">
            <summary>
            Represents the update profile info.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateProfileInfo.ScreenName">
            <summary>
            Gets or sets the screen name.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateProfileInfo.Gender">
            <summary>
            Gets or sets the gender. f: female, m: male
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateProfileInfo.Province">
            <summary>
            Gets or sets the province.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/%E7%9C%81%E4%BB%BD%E5%9F%8E%E5%B8%82%E7%BC%96%E7%A0%81%E8%A1%A8
            </remarks>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateProfileInfo.City">
            <summary>
            Gets or sets the city. 1000 means unspecified
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/%E7%9C%81%E4%BB%BD%E5%9F%8E%E5%B8%82%E7%BC%96%E7%A0%81%E8%A1%A8
            </remarks>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateProfileInfo.Description">
            <summary>
            Gets or sets the personal description. Less than 70 chinese chars.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.PrivacyInfo">
            <summary>
            Represents the user privacy info.
            </summary>
            <remarks>
            comment ： 谁可以评论此账号的微薄。0：所有人，1：我关注的人。
            dm ： 谁可以给此账号发私信。0：所有人，1：我关注的人。
            real_name： 是否允许别人通过真实姓名搜索到我， 0允许，1不允许。
            geo ： 发布微博，是否允许微博保存并显示所处的地理位置信息。 0允许，1不允许。
            badge ： 勋章展现状态，值—1私密状态，0公开状态。 
            </remarks>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PrivacyInfo.CommentPrivacy">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PrivacyInfo.MessagePrivacy">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PrivacyInfo.RealNamePrivacy">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PrivacyInfo.GeoPrivacy">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PrivacyInfo.BadgePrivacy">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.Common.APIUri">
            <summary>
            Defines the SINA micro-blog API's uris (in xml format if applicable).
            </summary>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.WeiboUriPrefix">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.RequestToken">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.Authorize">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.AccessToken">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.VerifyCredential">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.EndSession">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetRateLimitStatus">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UpdateProfileImage">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UpdateProfile">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UpdatePrivacy">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetPrivacy">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetDirectMessages">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetSentDirectMessages">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.SendDirectMessage">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteDirectMessage">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteDirectMessages">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.ShowStatus">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetStatusUrl">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UpdateStatus">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UpdateStatusWithPic">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteStatus">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.RepostStatus">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.Comment">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetComments">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.ReplyComment">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteComment">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteComments">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.SearchStatuses">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.PublicTimeline">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.FriendsTimeline">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UserTimeline">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetMentions">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.CommentsTimeline">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.CommentsByMe">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.CommentsToMe">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetCountersOfCommentNForward">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetUnreadInfo">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.ResetCounter">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetEmotions">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetUserInfo">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetFriends">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetFollowers">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetHotUsers">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UpdateRemark">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetSuggestedUsers">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.SearchUsers">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetUserSearchSuggestions">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.CreateFriendship">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteFriendship">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.ExistsFriendship">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetFriendshipInfo">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetFollowingUserIDs">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetFollowerUserIDs">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetTags">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.CreateTags">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteTag">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteTags">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetSuggestedTags">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetFavorites">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.AddToFavorite">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteFromFavorite">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.DeleteMultipleFromFavorite">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetBlockingList">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetBlockingListIDs">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.Block">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.Unblock">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.IsBlocked">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetUserTrends">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetHourTrends">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetDayTrends">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetWeekTrends">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetTrendStatuses">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.FollowTrend">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.UnfollowTrend">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.ConvertToShortUrls">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.ConvertToLongUrls">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetShortUrlSharedCount">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetShortUrlSharedStatuses">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetShortUrlCommentCount">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.APIUri.GetShortUrlComments">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Hyperlink">
            <summary>
            Represents a hyperlink.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Hyperlink.Uri">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Hyperlink.Text">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.Common.ParamCollection">
            <summary>
            Represents the collection of <c>ParamPair</c>.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.ParamCollection.#ctor">
            <summary>
            Initializes a new instance of <c>ParamCollection</c>.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.ParamCollection.#ctor(System.Collections.Generic.IEnumerable{AMicroblogAPI.Common.ParamPair})">
            <summary>
            Initializes a new instance of <c>ParamCollection</c>.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:AMicroblogAPI.Common.ParamCollection.Add(System.String,System.String)">
            <summary>
            Adds a name and value pari into the collection.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:AMicroblogAPI.Common.HttpMethod">
            <summary>
            Defines constants of HTTP methods. 
            </summary>
        </member>
        <member name="F:AMicroblogAPI.Common.HttpMethod.Get">
            <summary>
            Represent the HTTP method 'GET'.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.Common.HttpMethod.Post">
            <summary>
            Represent the HTTP method 'POST'.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.Common.HttpMethod.Delete">
            <summary>
            Represent the HTTP method 'DELETE'.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Emotions">
            <summary>
            Represents a group of emotions.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Emotions.Items">
            <summary>
            Gets the emotions.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.DirectMessages">
            <summary>
            Represents a set of direct message.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessages.Items">
            <summary>
            Gets the direct messages.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UrlInfo">
            <summary>
            Represents a short and long url mapping.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UrlInfo.ShortUrl">
            <summary>
            Gets or sets the short url.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UrlInfo.LongUrl">
            <summary>
            Gets or sets the long url.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UrlInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UrlInfo.SharedCount">
            <summary>
            Gets or sets the share count of the short url.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UrlInfo.CommentCount">
            <summary>
            Gets or sets the comment count of the short url.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.HttpRequest">
            <summary>
            Represents the base class for HTTP requests.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.IHttpRequest">
            <summary>
            Defines methods to perform HTTP request.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.IHttpRequest.Request">
            <summary>
            Performs the HTTP request.
            </summary>
            <returns>The HTTP response.</returns>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.IHttpRequest.RequestAsync(AMicroblogAPI.Common.AsyncCallback{System.String})">
            <summary>
            Performs the HTTP request asynchronously.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.HttpRequests.HttpRequest.Uri">
            <summary>
            The uri the request goes to.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.HttpRequest"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri the request goes to.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.Request">
            <summary>
            Performs the HTTP request.
            </summary>
            <returns>The server response string(UTF8 decoded).</returns>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.RequestAsync(AMicroblogAPI.Common.AsyncCallback{System.String})">
            <summary>
            The asynchronous implementation of <see cref="M:AMicroblogAPI.HttpRequests.IHttpRequest.Request"/>
            </summary>
            <param name="callback">The callback to invoke when the async requests completes.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.DoRequest(System.Object)">
            <summary>
            Performs the async request.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.ConstructUri">
            <summary>
            When overriden in derived classes, constructs the final request uri based on relevent conditions.
            </summary>
            <returns>The final request uri constucted.</returns>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.AppendHeaders(System.Net.WebHeaderCollection)">
            <summary>
            When overridden in derived classes, appends HTTP headers into the request.
            </summary>
            <param name="headers">The web header collection object.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.PrepareRequest(System.Net.HttpWebRequest)">
            <summary>
            When overridden in derived classes, sets additional request arguments on the web request object.
            </summary>
            <param name="webRequest">The web request object.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.WriteBody(System.IO.Stream)">
            <summary>
            When overridden in derived classes, writes data into the request stream.
            <remarks>HTTP GET type request is not supported.</remarks>
            </summary>
            <param name="reqStream">The request stream object.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpRequest.RetrieveResponse(System.Net.WebResponse)">
            <summary>
            Retrieves the response from the request.
            </summary>
            <param name="webResponse"></param>
            <returns>The server response string(UTF8 decoded).</returns>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.HttpRequest.Method">
            <summary>
            Gets or sets the HTTP method of the request.(i.e: POST, GET etc.)
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.HttpRequest.ContentType">
            <summary>
            Gets or sets the content type of the request.(i.e: text/plain etc.)
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.PeriodTrends">
            <summary>
            Represents a group of trends(topic).
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PeriodTrends.Items">
            <summary>
            Gets the trends.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PeriodTrends.Time">
            <summary>
            Gets or sets the time of the trend.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.PeriodTrends.AsOf">
            <summary>
            Gets or sets the as-of of the trend.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.OAuthHttpGet">
            <summary>
            Performs a OAuth token-attached HTTP-Get request to the resource identified by the <c>uri</c> 
            with the combination of OAuth parameters and the specified <c>AdditionalParams</c>(optional).        
            <remarks>
            The signature is created upon the OAuth parameters and the specified <see cref="P:AMicroblogAPI.HttpRequests.OAuthHttpGet.Params"/>.
            Do not put OAuth parameters in <see cref="P:AMicroblogAPI.HttpRequests.OAuthHttpGet.Params"/>, they are automatically included.
            There are two ways to pass OAuth: 
            1. Put OAuth authorization info in HTTP header; (This way seems not working when there are additional parameters(in addition to OAuth parameters). All combinations tried.); 
            2. Put OAuth authorization info in query string.
            This class uses way #2.
            Hint: Cannot do both in the same request.
            </remarks>
            </summary>
            <returns>The server response string(UTF8 decoded).</returns>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.HttpGet">
            <summary>
            Performs a simple/clean (non-token-attached) HTTP-Get request to the resource identified by the uri.
            <remarks>
            If there are qurey parameters, please add to <see cref="P:AMicroblogAPI.HttpRequests.HttpGet.Params"/>. 
            They will be appended to the uri before making the request.
            </remarks>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpGet.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.HttpGet"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpGet.ConstructUri">
            <summary>
            Constructs the uri by appending the query parameters in <see cref="P:AMicroblogAPI.HttpRequests.HttpGet.Params"/>.
            </summary>
            <example>
            For example: 
            Before: http://api.t.sina.com.cn/statuses/public_timeline.xml 
            After: http://api.t.sina.com.cn/statuses/public_timeline.xml?source=123123. 
            </example>
            <returns>The uri with query string appended.</returns>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.HttpGet.Params">
            <summary>
            Gets or sets parameters to be sent in the request query string.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthHttpGet.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.OAuthHttpGet"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthHttpGet.ConstructUri">
            <summary>
            Constructs the uri by appending OAuth authorization query string and additional query parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthHttpGet.CollectAllParams">
            <summary>
            Combines the OAuth basic parameters and additional parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.OAuthHttpGet.Params">
            <summary>
            Gets or sets additional parameters (in addition to the OAuth parameters) to be sent in the request.
            <remarks>Usually API related parameters.</remarks>
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.OAuthHttpDelete">
            <summary>
            Performs a OAuth token-attached HTTP-Delete request to the resource identified by the <c>uri</c>.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthHttpDelete.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.OAuthHttpDelete"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Statuses">
            <summary>
            Represents a set of status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Statuses.Items">
            <summary>
            Gets the statuses.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Statuses.TotalCount">
            <summary>
            Gets or sets the total count. This property is valid only in SearchStatuses API. 
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UserSuggestionInfo">
            <summary>
            Represents the user suggestion info.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserSuggestionInfo.ID">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserSuggestionInfo.ScreenName">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserSuggestionInfo.Remark">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.ErrorResponse">
            <summary>
            Represents an error response from remote server.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.ErrorResponse.Uri">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.ErrorResponse.ErrorCode">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.ErrorResponse.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.HttpPost">
            <summary>
            Performs a Http-Post request to the resource identified by the <c>Uri</c> with the <c>PostData</c>.
            <remarks>
            OAtuh parameters are not sent in the reqeuest.
            If an OAuth request is intended, please use <see cref="T:AMicroblogAPI.HttpRequests.OAuthHttpPost"/> or <see cref="T:AMicroblogAPI.HttpRequests.OAuthMultiPartHttpPost"/>.
            </remarks>
            </summary>
            <example>
            Below is an example of the post data:
            <![CDATA[
            action=submit&oauth_token%253Ddea035e505ac54b80c9c9077eebaafc7%2526oauth_callback%253Doob%2526from%253D%2526with_cookie%253D&oauth_token=dea035ea505ac54b280c9c9077deebaafc7&oauth_callback=oob&from=&forcelogin=
            ]]>
            </example>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpPost.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.HttpPost"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpPost.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.HttpPost"/> with the specified <paramref name="uri"/> and <paramref name="postData"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
            <param name="postData">The data to be posted.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpPost.WriteBody(System.IO.Stream)">
            <summary>
            When overridden in derived classes, writes post data into the request stream.
            </summary>
            <remarks>
            ASCII encoding is used to convert <see cref="P:AMicroblogAPI.HttpRequests.HttpPost.PostData"/> into bytes. 
            Other encoding like UTF8 could cause unexpected issue in some cases like AddToFavorite.
            </remarks>
            <param name="reqStream">The request stream to write data with.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.HttpPost.AppendHeaders(System.Net.WebHeaderCollection)">
            <summary>
            <see cref="M:AMicroblogAPI.HttpRequests.HttpRequest.AppendHeaders(System.Net.WebHeaderCollection)"/>
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.HttpPost.PostData">
            <summary>
            Gets or sets the data to post (in url-encoded format).
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.MultiPartHttpPost">
            <summary>
            Performs a multi-part (multipart/form-data) Http-Post request to the resource identified by the uri with the specified PartFields.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.MultiPartHttpPost.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.MultiPartHttpPost"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.MultiPartHttpPost.WriteBody(System.IO.Stream)">
            <summary>
            See <see cref="M:AMicroblogAPI.HttpRequests.HttpPost.WriteBody(System.IO.Stream)"/>
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.MultiPartHttpPost.PostData">
            <summary>
            Gets the data to post.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.MultiPartHttpPost.PartFields">
            <summary>
            Gets the multi-part fields.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.AsyncCallback`1">
            <summary>
            Represents the delegate of a async call's callback with the specified type of result data.
            </summary>
            <typeparam name="T">The type of the result data.</typeparam>
            <param name="result">The result of async call.</param>
        </member>
        <member name="T:AMicroblogAPI.Common.VoidAsyncCallback">
            <summary>
            Represents the delegate of a async call's callback.
            </summary>
            <param name="result">The result of async call.</param>
        </member>
        <member name="T:AMicroblogAPI.AMicroblog">
            <summary>
            Provides APIs to access weibo.com.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.LoginAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.Common.OAuthAccessToken},System.String,System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Login(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetRequestTokenAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.Common.OAuthRequestToken})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetRequestToken"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.AuthorizeAsync(AMicroblogAPI.Common.AsyncCallback{System.String},System.String,System.String,System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Authorize(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetAccessTokenAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.Common.OAuthAccessToken},AMicroblogAPI.Common.OAuthRequestToken,System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetAccessToken(AMicroblogAPI.Common.OAuthRequestToken,System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetRateLimitStatusAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.RateLimitStatus})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetRateLimitStatus"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetEmotionsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Emotions},AMicroblogAPI.DataContract.EmotionType,System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetEmotions(AMicroblogAPI.DataContract.EmotionType,System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteTagsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.TagIDs},System.Int64[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteTags(System.Int64[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetBlockingListIDsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserIDs},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetBlockingListIDs(System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.IsBlockedAsync(AMicroblogAPI.Common.AsyncCallback{System.Boolean},System.Nullable{System.Int64},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.IsBlocked(System.Nullable{System.Int64},System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.FollowTrendAsync(AMicroblogAPI.Common.AsyncCallback{System.Int64},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.FollowTrend(System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UnfollowTrendAsync(AMicroblogAPI.Common.AsyncCallback{System.Boolean},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.UnfollowTrend(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlSharedStatusesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetShortUrlSharedStatuses(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlCommentsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Comments},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetShortUrlComments(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SearchUsersAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Users},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.SearchUsers(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SearchStatusesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.SearchStatuses(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserTrendsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Trends},System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetUserTrends(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.VerifyCredentialAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.VerifyCredential"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.EndSessionAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.EndSession"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdateProfileImageAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.UpdateProfileImage(System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdateProfileAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},AMicroblogAPI.DataContract.UpdateProfileInfo)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.UpdateProfile(AMicroblogAPI.DataContract.UpdateProfileInfo)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetPrivacyAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.PrivacyInfo})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetPrivacy"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdatePrivacyAsync(AMicroblogAPI.Common.VoidAsyncCallback,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.UpdatePrivacy(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetStatusAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.StatusInfo},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetStatus(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.PostStatusAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.StatusInfo},AMicroblogAPI.DataContract.UpdateStatusInfo)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.PostStatus(AMicroblogAPI.DataContract.UpdateStatusInfo)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.PostStatusWithPicAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.StatusInfo},AMicroblogAPI.DataContract.UpdateStatusWithPicInfo)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.PostStatusWithPic(AMicroblogAPI.DataContract.UpdateStatusWithPicInfo)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteStatusAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.StatusInfo},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteStatus(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ForwardAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.StatusInfo},System.Int64,System.String,System.Boolean,System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Forward(System.Int64,System.String,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.CommentAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.CommentInfo},System.Int64,System.String,System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Comment(System.Int64,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCommentsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Comments},System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetComments(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ReplyCommentAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.CommentInfo},System.Int64,System.String,System.Int64,System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.ReplyComment(System.Int64,System.String,System.Int64,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteCommentAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.CommentInfo},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteComment(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteCommentsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Comments},System.Int64[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteComments(System.Int64[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetDirectMessagesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.DirectMessages},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetDirectMessages(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetSentDirectMessagesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.DirectMessages},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetSentDirectMessages(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SendDirectMessageAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.DirectMessageInfo},System.Int64,System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.SendDirectMessage(System.Int64,System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SendDirectMessageAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.DirectMessageInfo},System.String,System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.SendDirectMessage(System.Int64,System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteDirectMessageAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.DirectMessageInfo},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteDirectMessage(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteDirectMessagesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.DirectMessages},System.Int64[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteDirectMessages(System.Int64[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserStatusesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},AMicroblogAPI.DataContract.StatusType,System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetUserStatuses(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},AMicroblogAPI.DataContract.StatusType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetPublicStatusesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.Int32,System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetPublicStatuses(System.Int32,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriendsStatusesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},AMicroblogAPI.DataContract.StatusType,System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetFriendsStatuses(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},AMicroblogAPI.DataContract.StatusType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetMentionsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetMentions(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCommentsTimelineAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Comments},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetCommentsTimeline(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCommentsByMeAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Comments},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetCommentsByMe(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCommentsToMeAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Comments},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetCommentsToMe(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCountersOfCommentNForwardAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Counters},System.Int64[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetCountersOfCommentNForward(System.Int64[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUnreadInfoAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UnreadInfo},System.Boolean,System.Nullable{System.Int64})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetUnreadInfo(System.Boolean,System.Nullable{System.Int64})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ResetCounterAsync(AMicroblogAPI.Common.VoidAsyncCallback,AMicroblogAPI.DataContract.CounterType)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.ResetCounter(AMicroblogAPI.DataContract.CounterType)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserInfoAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetUserInfo(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserInfoAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetUserInfo(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriendsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Users},System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetFriends(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowersAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Users},System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetFollowers(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetHotUsersAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Users},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetHotUsers(System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdateFriendRemarkAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Users},System.Int64,System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.UpdateFriendRemark(System.Int64,System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetSuggestedUsersAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Users})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetSuggestedUsers"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserSearchSuggestionsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserSuggestions},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetUserSearchSuggestions(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.FollowAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},System.Nullable{System.Int64},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Follow(System.Nullable{System.Int64},System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UnfollowAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},System.Nullable{System.Int64},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Unfollow(System.Nullable{System.Int64},System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ExistsFriendshipAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.ExistsFriendshipResultInfo},System.Int64,System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.ExistsFriendship(System.Int64,System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriendshipInfoAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.RelationshipInfo},System.Int64,System.Nullable{System.Int64})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetFriendshipInfo(System.Int64,System.Nullable{System.Int64})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowingUserIDsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserIDs},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetFollowingUserIDs(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowerUserIDsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserIDs},System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetFollowerUserIDs(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetTagsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Tags},System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetTags(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetSuggestedTagsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Tags},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetSuggestedTags(System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.CreateTagsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.TagIDs},System.String[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.CreateTags(System.String[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteTagAsync(AMicroblogAPI.Common.VoidAsyncCallback,System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteTag(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFavoritesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetFavorites(System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.AddToFavoriteAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.StatusInfo},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.AddToFavorite(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteFromFavoriteAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.StatusInfo},System.Int64)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteFromFavorite(System.Int64)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteMultipleFromFavoriteAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.Int64[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.DeleteMultipleFromFavorite(System.Int64[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetBlockingListAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Users},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetBlockingList(System.Nullable{System.Int32},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.BlockAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},System.Nullable{System.Int64},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Block(System.Nullable{System.Int64},System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UnblockAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.UserInfo},System.Nullable{System.Int64},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.Unblock(System.Nullable{System.Int64},System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetHourTrendsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.PeriodTrends},System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetHourTrends(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetDayTrendsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.PeriodTrends},System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetDayTrends(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetWeekTrendsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.PeriodTrends},System.Boolean)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetWeekTrends(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetTrendStatusesAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Statuses},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetTrendStatuses(System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ConvertToShortUrlsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Urls},System.String[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.ConvertToShortUrls(System.String[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ConvertToLongUrlsAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Urls},System.String[])">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.ConvertToLongUrls(System.String[])"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlSharedCountAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Urls},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetShortUrlSharedCount(System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlCommentCountAsync(AMicroblogAPI.Common.AsyncCallback{AMicroblogAPI.DataContract.Urls},System.String)">
            <summary>
            The async implementation of <see cref="M:AMicroblogAPI.AMicroblog.GetShortUrlCommentCount(System.String)"/>
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetRequestToken">
            <summary>
            Retrieves a one-time use request token.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Oauth/request_token
            </remarks>
            <returns>The request token retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Authorize(System.String,System.String,System.String)">
            <summary>
            Authorizes the un-authorized request token with a SINA passport(user name and password).
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Oauth/authorize
            </remarks>
            <param name="requestToken">The un-authorized request token previously obtained.</param>
            <param name="userName">The user name of sina passport.</param>
            <param name="password">The password of sina passport.</param>
            <returns>The authorization code(aka oauth_verifier).</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetAccessToken(AMicroblogAPI.Common.OAuthRequestToken,System.String)">
            <summary>
            Exchanges the request token for an access token.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Oauth/access_token
            Both Http-Get and Http-Post can work. In this API is implemented with Http-Get.
            </remarks>
            <param name="requestToken">The request token previously obtained.</param>
            <param name="verifier">The authorization code.</param>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Login(System.String,System.String)">
            <summary>
            Performs a OAuth login with the specified <paramref name="userName"/> and <paramref name="password"/>.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Oauth
            This method is implemented by sequentially calling <see cref="M:AMicroblogAPI.AMicroblog.GetRequestToken"/>, 
            <see cref="M:AMicroblogAPI.AMicroblog.Authorize(System.String,System.String,System.String)"/> and <see cref="M:AMicroblogAPI.AMicroblog.GetAccessToken(AMicroblogAPI.Common.OAuthRequestToken,System.String)"/>
            The access token is stored in <see cref="P:AMicroblogAPI.Environment.AccessToken"/> after login.</remarks>
            <param name="userName">The user name of a SINA passport.</param>
            <param name="password">The password of a SINA passport.</param>
            <returns>The access token.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Logout">
            <summary>
            Performs a local logout. Cleans the Environment data.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.VerifyCredential">
            <summary>
            Verifies whether the current user has SINA microblog service enabled.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Account/verify_credentials </remarks>
            <returns>The user info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.EndSession">
            <summary>
            Terminates the web-login user's session.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Account/end_session </remarks>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetRateLimitStatus">
            <summary>
            Retrieves the app's rate limit. 
            </summary>
            <remarks>See http://open.weibo.com/wiki/Account/rate_limit_status </remarks>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdateProfileImage(System.String)">
            <summary>
            Updates the profile image of the current user.
            </summary>
            <remarks>
            Extra permission required to call this API.
            Returns error "40070:Error: not enough permission to call the api, pls contact the app developer." if permission insufficient.
            See http://open.weibo.com/wiki/Account/update_profile_image
            </remarks>
            <param name="imageFileLocation">The file location of the image file to upload. Limit as 700KB</param>
            <returns>The posted status.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdateProfile(AMicroblogAPI.DataContract.UpdateProfileInfo)">
            <summary>
            Updates the profile info of current user.
            </summary>
            <remarks>
            Extra permission required to call this API.
            Returns error "40070:Error: not enough permission to call the api, pls contact the app developer." if permission insufficient.
            See http://open.weibo.com/wiki/Account/update_profile
            </remarks>
            <param name="updateProfileInfo">The update profile info.</param>
            <returns>The user info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetPrivacy">
            <summary>
            Retrieves the privacy info of the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Account/get_privacy </remarks>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdatePrivacy(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Updates the privacy settings of the current user.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Account/update_privacy 
            Extra permission required to call this API.
            Returns error "40070:Error: not enough permission to call the api, pls contact the app developer." if permission insufficient.
            </remarks>
            <param name="commentPrivacy">
            The comment privacy, indicating who can comment the statuses of mine. 
            0: All(default), 1: People I am following 
            </param>
            <param name="messagePrivacy">
            The message privacy, indicating who can send private message to me.
            0: All 1:People I am following(default)
            </param>
            <param name="realNamePrivacy">
            The realname privacy, indicating whether others can search me by real name.
            0: Allow 1: Not Allow(deault)
            </param>
            <param name="geoPrivacy">
             The geo privacy, indicating whether show geo info in my statuses if there is any.
             0: Allow(default) 1: Not Allow
            </param>
            <param name="badgePrivacy">
            The badge privacy, indicating whether display my badge.
            0: Display(default) -1: Hide
            </param>
            <returns>A boolean value indicating whether the update succeed.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetStatus(System.Int64)">
            <summary>
            Retrieves the info of a microblog status by its id.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/show </remarks>
            <param name="statusID">The id to identify the status.</param>
            <returns>The status info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetStatusUrl(System.Int64)">
            <summary>
            Retrieves the url of a microblog status by its id.
            </summary>
            <remarks>See http://open.weibo.com/wiki/User/statuses/id 
            This is not a remote call. This method just constructs the url and returns it.
            </remarks>
            <param name="statusID">The id to identify the status.</param>
            <returns>The url of the status.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.PostStatus(AMicroblogAPI.DataContract.UpdateStatusInfo)">
            <summary>
            Posts a status to weibo.com.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/update </remarks>
            <param name="updateStatusInfo">The status info object.</param>
            <returns>The posted status.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.PostStatusWithPic(AMicroblogAPI.DataContract.UpdateStatusWithPicInfo)">
             <summary>
             Posts a with-pic status to weibo.com.
             See <seealso cref="M:AMicroblogAPI.AMicroblog.PostStatus(AMicroblogAPI.DataContract.UpdateStatusInfo)"/>
             </summary>
             <remarks>
             'status' should not be empty, otherwise bad reuqest error 400 returned.
             posting duplicate status also causes return 400 error.
             See http://open.weibo.com/wiki/Statuses/upload
            </remarks>
             <param name="updateStatusWithPicInfo">The status info object.</param>
             <returns>The posted status.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteStatus(System.Int64)">
            <summary>
            Deletes a microblog status by its id.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/destroy </remarks>
            <param name="statusID">The id to identify the status.</param>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Forward(System.Int64,System.String,System.Boolean,System.Boolean)">
            <summary>
            Re-posts a microblog status.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/repost </remarks>
            <param name="statusID">The id to identify the status to be reposted.</param>
            <param name="repostStatusText">The status text to add in addition to the reposted status.</param>
            <param name="commentToAuthor">Indicates whether this status is as a comment to the author of the reposted status.</param>
            <param name="commentToOriginalAuthor">Indicates whether this status is as a comment to the author of the original status if there is any.</param>
            <returns>The status info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Comment(System.Int64,System.String,System.Boolean)">
            <summary>
            Comments a status.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/comment </remarks>
            <param name="statusID">The status id to identify the status.</param>
            <param name="comment">The comment text.</param>
            <param name="commentToOriginalAuthor">Indicate whether to comment to the original status if the status is a reposted one.</param>
            <returns>The comment info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetComments(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the comments of a specified status.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/comments </remarks>
            <param name="statusID">The ID of the target status</param>
            <param name="page">The page index. Default to 1.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20. Maxmum as 200.</param>
            <returns>The comments.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ReplyComment(System.Int64,System.String,System.Int64,System.Boolean)">
            <summary>
            Replies a comment of a status.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/reply </remarks>
            <param name="commentID">The comment id to comment to.</param>
            <param name="comment">The comment text.</param>
            <param name="statusID">The status which owns the comment.</param>
            <param name="withoutMention">Indicates whether to include the '@' ref.</param>
            <returns>The comment info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteComment(System.Int64)">
            <summary>
            Deletes a comment identified by the specified <paramref name="commentID"/>.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/comment_destroy </remarks>
            <param name="commentID">The comment id.</param>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteComments(System.Int64[])">
            <summary>
            Deletes multiple comments.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/comment/destroy_batch </remarks>
            <param name="commentIDs">The comments ids.</param>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SearchStatuses(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Searches microblog statuses by the specified conditions.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/search 
            Extra permission required to call this API.
            </remarks>
            <param name="keyword">The keyword to search by.</param>
            <param name="statusType">The type of statuses to search. 4: forwarded, 5: original, 0: all, default to 0.</param>
            <param name="includePic">Indicates whether searching in statues with pic or not with pic. If not specified, search in both.</param>
            <param name="authorID">The author ID. If specified, perform the search in the statuses of this author only.</param>
            <param name="provice">The provice id.</param>
            <param name="city">The city id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 10.</param>
            <param name="returnCounter">Indicates whether to return the counter info or not.</param>
            <param name="currentAppOnly">Indicates whether retrieve the statuses the posted from the current app only.</param>
            <returns>The statuses found.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetDirectMessages(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves a certain mumber of latest direct messages of the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Direct_messages 
            Extra permission required to call this API.
            </remarks>
            <param name="sinceID">Filter condition, only retrives the direct message after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the direct message before <paramref name="maxID"/>.</param> 
            <param name="page">The page index.</param>
            <param name="count">The number of direct message to return, if not specified, default to 20.</param>
            <returns>The direct messages of the current user.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetSentDirectMessages(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves a certain mumber of the sent direct messages of the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Direct_messages/sent 
            Extra permission required to call this API.
            </remarks>
            <param name="sinceID">Filter condition, only retrives the direct message after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the direct message before <paramref name="maxID"/>.</param> 
            <param name="page">The page index.</param>
            <param name="count">The number of direct message to return, if not specified, default to 20.</param>
            <returns>The sent direct messages of the current user.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SendDirectMessage(System.Int64,System.String)">
            <summary>
            Sends a direct message to a specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Direct_messages/new 
            If the receiver is not a follower of the current user, server returns "40017:Error: can't send direct message to user who is not your follower!".
            Extra permission required to call this API.
            </remarks>
            <param name="receiverID">The id of the receiver.</param>
            <param name="message">The message to send.</param>
            <returns>The direct messages sent.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SendDirectMessage(System.String,System.String)">
            <summary>
            Sends a direct message to a specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Direct_messages/new 
            If the receiver is not a follower of the current user, server returns "40017:Error: can't send direct message to user who is not your follower!".
            Extra permission required to call this API.
            </remarks>
            <param name="receiverScreenName">The id of the receiver.</param>
            <param name="message">The message to send.</param>
            <returns>The direct messages sent.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteDirectMessage(System.Int64)">
            <summary>
            Deletes a direct message identified by the specified <paramref name="directMessageID"/>.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Direct_messages/destroy 
            Extra permission required to call this API.
            </remarks>
            <param name="directMessageID">The id of the direct message.</param>
            <returns>The direct message deleted.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteDirectMessages(System.Int64[])">
            <summary>
            Deletes a direct message identified by the specified <paramref name="directMessageIDs"/>.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Direct_messages/destroy_batch 
            Extra permission required to call this API.
            </remarks>
            <param name="directMessageIDs">The id of the direct messages. At most 20 each call.</param>
            <returns>The direct messages deleted.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserStatuses(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},AMicroblogAPI.DataContract.StatusType,System.Boolean)">
            <summary>
            Retrieves a certain mumber of latest statuses of the specified user or current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/user_timeline </remarks>
            <param name="userID">The user of whoes statues to retrieve, if not specified, default to current user.</param>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param> 
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <param name="feature">The type of statuses to retrieve.</param>
            <param name="currentAppOnly">Indicates whether retrieve the statuses the posted from the current app only.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetPublicStatuses(System.Int32,System.Boolean)">
            <summary>
            Retrieves a certain mumber of latest statuses of the public users.
            </summary>
            <remarks>
            Not login required.
            See http://open.weibo.com/wiki/Statuses/public_timeline 
            </remarks>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <param name="currentAppOnly">Indicates whether retrieve the statuses the posted from the current app only.</param>
            <returns>The statuses retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriendsStatuses(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},AMicroblogAPI.DataContract.StatusType,System.Boolean)">
            <summary>
            Retrieves a certain mumber of latest statuses of the friends current user is following.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/friend_timeline </remarks>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param>
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <param name="feature">The feature to retrieve.</param>
            <param name="currentAppOnly">Indicates whether retrieve the statuses the posted from the current app only.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetMentions(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the statuses which mentions the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/mentions </remarks>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param>
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCommentsTimeline(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the comments sent/received by the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/comments_timeline </remarks>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param>
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCommentsByMe(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the comments sent by the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/comments_by_me </remarks>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param>
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCommentsToMe(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the comments sent to the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/comments_to_me </remarks>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param>
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetCountersOfCommentNForward(System.Int64[])">
            <summary>
            Retrieves the comment counter and repost counter of the specified statuses.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/counts </remarks>
            <param name="statusIDs">The ids of the statuses to query. At most 20.</param>
            <returns>The counters.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUnreadInfo(System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Retrieves the unread counters of the current user.
            </summary>
            <remarks>
            If <paramref name="sinceID"/> is specified, <paramref name="withNewStatus"/> must also be specified.
            See http://open.weibo.com/wiki/Statuses/unread
            </remarks>
            <param name="withNewStatus">Indicates whether to include the boolean field "WithNewStatus" in the response.</param>
            <param name="sinceID">Further filtering for <paramref name="withNewStatus"/> check.</param>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ResetCounter(AMicroblogAPI.DataContract.CounterType)">
            <summary>
            Resets the unread counters of the specified type to zero.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/reset_count </remarks>
            <param name="counterType">The type of counter to reset.</param>
            <returns>A boolean value indicating whether the counter resets to zero.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetEmotions(AMicroblogAPI.DataContract.EmotionType,System.String)">
            <summary>
            Retrieves the system defined emotions.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Emotions </remarks>
            <param name="emotionType">The type of emotion to retrive.</param>
            <param name="language">The language. i.e: cnname, twname</param>
            <returns>The emotions retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserInfo(System.Int64)">
            <summary>
            Retrives the info of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Users/show </remarks>
            <param name="userID">The user id.</param>
            <returns>The user info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserInfo(System.String)">
            <summary>
            Retrives the info of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Users/show </remarks>
            <param name="screenName">The screen name of the user to retrieve.</param>
            <returns>The user info retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriends(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the friends of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/friends </remarks>
            <param name="userID">The user id. If not provided, defaults to current user.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The friends retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriends(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the friends of the specified user.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Statuses/friends 
            A friend is a microblog user you are following.
            </remarks>
            <param name="screenName">The screen name of the user. If not provided, defaults to current user.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The friends retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriends(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the friends of the specified user.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Statuses/friends 
            One of the <paramref name="userID"/> and <paramref name="screenName"/> should be provided. If not provided, defaults to current user.
            </remarks>
            <param name="userID">The user id.</param>
            <param name="screenName">The screen name of the user.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The friends retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowers(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the followers of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/followers </remarks>
            <param name="userID">The user id.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The followers retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowers(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the followers of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Statuses/followers </remarks>
            <param name="screenName">The screen name of the user.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The followers retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowers(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the followers of the specified user.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Statuses/followers 
            One of the <paramref name="userID"/> and <paramref name="screenName"/> should be provided. If not provided, defaults to current user.
            </remarks>
            <param name="userID">The user id.</param>
            <param name="screenName">The screen name of the user.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The followers retrieved.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetHotUsers(System.String)">
            <summary>
            Retrieves the hot users of the specified <paramref name="category"/>.
            </summary>
            <remarks>
            default 人气关注
            ent 影视名星
            hk_famous 港台名人
            model 模特
            cooking 美食&amp;健康
            sport 体育名人
            finance 商界名人
            tech IT互联网
            singer 歌手
            writer 作家
            moderator 主持人
            medium 媒体总编
            stockplayer 炒股高手
            See http://open.weibo.com/wiki/Users/hot
            </remarks>
            <param name="category">The user category, if not specified, default to 'default'.</param>
            <returns>The users returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UpdateFriendRemark(System.Int64,System.String)">
            <summary>
            Updates the remark of a friend of the current user.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/User/friends/update_remark
            </remarks>
            <param name="friendUserID">The friend's user id.</param>
            <param name="remark">The remark.</param>
            <returns>The friend's info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetSuggestedUsers">
            <summary>
            Returns a bunch of users the current user may be interested in.
            </summary>
            <remarks>
            See http://open.weibo.com/wiki/Users/suggestions
            </remarks>
            <returns>The users returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.SearchUsers(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Retrieves the users by the specified keyword.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Users/search 
            Extra permission required to call this API.
            </remarks>
            <param name="keyword">The keyword to search by.</param>
            <param name="page">The page index.</param>
            <param name="count">The count of a page. If not provided, defaults to 10.</param>
            <param name="currentAppOnly">Indicates whether retrieve the statuses the posted from the current app only.</param>
            <returns>The users found.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserSearchSuggestions(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the user suggestions by the specified keyword.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Search/suggestions/at_users </remarks>
            <param name="keyword">The keyword to search by.</param>
            <param name="type">The type of uses to search. 0: friends, 1: followers</param>
            <param name="count">The count of a page. If not provided, defaults to 10.</param>
            <param name="range">The range to search in. 0: search in name, 1: search in remark, 2: search both. Default to 2.</param>
            <returns>The user suggestions found.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Follow(System.Nullable{System.Int64},System.String)">
            <summary>
            Follows a specified user to become a fan of him/her.
            </summary>
            <remarks>
            One of the <paramref name="targetUserID"/> and <paramref name="targetUserScreenName"/> must be provided.
            See http://open.weibo.com/wiki/Friendships/create
            </remarks>
            <param name="targetUserID">The id of the user to follow.</param>
            <param name="targetUserScreenName">The screen name of the user to follow.</param>
            <returns>The info of the user followed.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Follow(System.Int64)">
            <summary>
            Follows a specified user to become a fan of him/her.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Friendships/create </remarks>
            <param name="targetUserID">The id of the user to follow.</param>
            <returns>The info of the user followed.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Follow(System.String)">
            <summary>
            Follows a specified user to become a fan of him/her.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Friendships/create </remarks>
            <param name="targetUserScreenName">The screen name of the user to follow.</param>
            <returns>The info of the user followed.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Unfollow(System.Nullable{System.Int64},System.String)">
            <summary>
            Unfollows a specified user.
            </summary>
            <remarks>One of the <paramref name="targetUserID"/> and <paramref name="targetUserScreenName"/> must be provided.
            See http://open.weibo.com/wiki/Friendships/destroy
            </remarks>
            <param name="targetUserID">The id of the user to follow.</param>
            <param name="targetUserScreenName">The screen name of the user to follow.</param>
            <returns>The info of the user.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Unfollow(System.Int64)">
            <summary>
            Unfollows a specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Friendships/destroy </remarks>
            <param name="targetUserID">The id of the user to follow.</param>
            <returns>The info of the user.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Unfollow(System.String)">
            <summary>
            Unfollows a specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Friendships/destroy </remarks>
            <param name="targetUserScreenName">The screen name of the user to follow.</param>
            <returns>The info of the user.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ExistsFriendship(System.Int64,System.Int64)">
            <summary>
            Checks whether <paramref name="userAID"/> followed <paramref name="userBID"/>.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Friendships/exists </remarks>
            <param name="userAID">The id of the user A.</param>
            <param name="userBID">The id of the user B.</param>
            <returns>The info of the user.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFriendshipInfo(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Retrieves the friendship info of the users identified by <paramref name="targetUserID"/> and <paramref name="sourceUserID"/>.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Friendships/show </remarks>
            <param name="targetUserID">The id of the target user.</param>
            <param name="sourceUserID">The id of the source user. If not provided, default to current user.</param>
            <returns>The info of the friendship.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowingUserIDs(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the id of the users that the specified user is following.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Friends/ids </remarks>
            <param name="userID">The id of the user. If not provided, defaults to current user.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The user ids.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFollowerUserIDs(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the id of the users who follows the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Followers/ids </remarks>
            <param name="userID">The id of the user. If not provided, defaults to current user.</param>
            <param name="screenName">The screen name of the user. If not provided, defaults to current user.</param>
            <param name="cursor">The cursor. -1 means the first page. If provides, next cursor will be returned in the response.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <returns>The user ids.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetTags(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the tags of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Tags </remarks>
            <param name="userID">The id of the user.</param>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <param name="page">The page no.</param>
            <returns>The tags returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetSuggestedTags(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the tags of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Tags/suggestions </remarks>
            <param name="count">The count of a page. If not provided, defaults to 10.</param>
            <param name="page">The page no.</param>
            <returns>The tags returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.CreateTags(System.String[])">
            <summary>
            Retrieves the tags of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Tags/create </remarks>
            <param name="tags">The tags. 10 at most for each user.</param>
            <returns>The id of the tags returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteTag(System.Int64)">
            <summary>
            Deletes a user tag by the <paramref name="tagID"/>.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Tags/destroy </remarks>
            <param name="tagID">The id of the tag.</param>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteTags(System.Int64[])">
            <summary>
            Deletes a bunch of user tags by the <paramref name="tagIDs"/>.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Tags/destroy_batch </remarks>
            <param name="tagIDs">The ids of the tags to delete. At most 20 each time.</param>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetFavorites(System.Nullable{System.Int32})">
            <summary>
            Retrieves the favorite of the current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Favorites </remarks>
            <param name="page">The page no.</param>
            <returns>The statuses in favorite.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.AddToFavorite(System.Int64)">
            <summary>
            Adds the specified status into the favorite of current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Favorites/create </remarks>
            <param name="statusID">The id of the status to add to.</param>
            <returns>The status info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteFromFavorite(System.Int64)">
            <summary>
            Deletes the specified status from the favorite of current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Favorites/destroy </remarks>
            <param name="statusID">The id of the status to delete from.</param>
            <returns>The status info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.DeleteMultipleFromFavorite(System.Int64[])">
            <summary>
            Deletes the specified statuses from the favorite of current user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Favorites/destroy_batch </remarks>
            <param name="statusIDs">The ids of the status to delete from.</param>
            <returns>The status info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetBlockingList(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the block list of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Blocks/blocking </remarks>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <param name="page">The page no.</param>
            <returns>The blocking users returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetBlockingListIDs(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the user ids of the block list of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Blocks/blocking/ids </remarks>
            <param name="count">The count of a page. If not provided, defaults to 20.</param>
            <param name="page">The page no.</param>
            <returns>The blocking users returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Block(System.Nullable{System.Int64},System.String)">
            <summary>
            Blocks the specified user for current user.
            </summary>
            <remarks>
            One of the <paramref name="userID"/> and <paramref name="screenName"/> must be specified.
            See http://open.weibo.com/wiki/Blocks/create 
            </remarks>
            <param name="userID">The id of the user to block.</param>
            <param name="screenName">The screen name of the user to block.</param>
            <returns>The blocking user info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.Unblock(System.Nullable{System.Int64},System.String)">
            <summary>
            Unblocks the specified user from the block list of current user.
            </summary>
            <remarks>
            One of the <paramref name="userID"/> and <paramref name="screenName"/> must be specified.
            See http://open.weibo.com/wiki/Blocks/destroy 
            </remarks>
            <param name="userID">The id of the user to unblock.</param>
            <param name="screenName">The screen name of the user to unblock.</param>
            <returns>The blocking user info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.IsBlocked(System.Nullable{System.Int64},System.String)">
            <summary>
            Checks whether the specified user is in the block list of current user.
            </summary>
            <remarks>
            One of the <paramref name="userID"/> and <paramref name="screenName"/> must be specified.
            See http://open.weibo.com/wiki/Blocks/exists 
            </remarks>
            <param name="userID">The id of the user to check.</param>
            <param name="screenName">The screen name of the user to check.</param>
            <returns>The blocking user info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetUserTrends(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the trends(topic) of the specified user.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Trends </remarks>
            <param name="userID">The id of the user. </param>
            <param name="page">The page no.  If not provided, defaults to 1.</param>
            <param name="count">The count of a page. If not provided, defaults to 10.</param>
            <returns>The trends returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetHourTrends(System.Boolean)">
            <summary>
            Retrieves the trends(topic) of current hour.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Trends/hourly </remarks>
            <param name="basedOnCurrentApp">Indicates whether to retrieve based on current app.</param>
            <returns>The trends returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetDayTrends(System.Boolean)">
            <summary>
            Retrieves the trends(topic) of today.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Trends/daily </remarks>
            <param name="basedOnCurrentApp">Indicates whether to retrieve based on current app.</param>
            <returns>The trends returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetWeekTrends(System.Boolean)">
            <summary>
            Retrieves the trends(topic) of current week.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Trends/weekly </remarks>
            <param name="basedOnCurrentApp">Indicates whether to retrieve based on current app.</param>
            <returns>The trends returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetTrendStatuses(System.String)">
            <summary>
            Retrieves the statuses under the specified trend(topic).
            </summary>
            <remarks>See http://open.weibo.com/wiki/Trends/statuses </remarks>
            <param name="trendName">The name(hot word) of the trend.</param>
            <returns>The statuses returned.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.FollowTrend(System.String)">
            <summary>
            Follows the specified trend(topic).
            </summary>
            <remarks>
            If the current user already followed the trend, error 40028 is returned.
            See http://open.weibo.com/wiki/Trends/follow </remarks>
            <param name="trendName">The name(hot word) of the trend.</param>
            <returns>The id of the trend followed.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.UnfollowTrend(System.Int64)">
            <summary>
            Unfollows the specified trend(topic).
            </summary>
            <remarks>
            If the current user already followed the trend, error 40028 is returned.
            See http://open.weibo.com/wiki/Trends/unfollow </remarks>
            <param name="trendID">The id of the trend.</param>
            <returns>A boolean value indicating whether the operation succeed.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ConvertToShortUrls(System.String[])">
            <summary>
            Converts the specified <paramref name="longUrls"/> into short urls.
            </summary>
            <remarks>
            Not login required.
            See http://open.weibo.com/wiki/Short_url/shorten 
            </remarks>
            <param name="longUrls">The long urls. 20 at most each call. Make sure the long urls are url-encoded. i.e: http://open.weibo.com/wiki/API%E6%96%87%E6%A1%A3 </param>
            <returns>The url info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ConvertToLongUrls(System.String[])">
            <summary>
            Converts the specified <paramref name="shortUrls"/> back into original long urls.
            </summary>
            <remarks>
            Not login required.
            See http://open.weibo.com/wiki/Short_url/expand 
            </remarks>
            <param name="shortUrls">The long urls. 20 at most each call.</param>
            <returns>The url info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlSharedCount(System.String)">
            <summary>
            Retrieves the shared count of the specified <paramref name="shortUrl"/>.
            </summary>
            <remarks>
            Not login required.
            See http://open.weibo.com/wiki/Short_url/share/counts 
            </remarks>
            <param name="shortUrl">The short url.</param>
            <returns>The url info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlSharedStatuses(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the statuses in which the specified <paramref name="shortUrl"/> is shared.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Short_url/share/statuses </remarks>
            <param name="shortUrl">The short url.</param>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param> 
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlCommentCount(System.String)">
            <summary>
            Retrieves the comment count of the specified <paramref name="shortUrl"/>.
            </summary>
            <remarks>
            Not login required.
            See http://open.weibo.com/wiki/Short_url/comment/counts
            </remarks>
            <param name="shortUrl">The short url.</param>
            <returns>The url info.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.GetShortUrlComments(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves the comment in which the specified <paramref name="shortUrl"/> is shared.
            </summary>
            <remarks>See http://open.weibo.com/wiki/Short_url/comment/comments </remarks>
            <param name="shortUrl">The short url.</param>
            <param name="sinceID">Filter condition, only retrives the statuses after <paramref name="sinceID"/>.</param>
            <param name="maxID">Filter condition, only retrives the statuses before <paramref name="maxID"/>.</param> 
            <param name="page">The page index.</param>
            <param name="count">The number of statuses to return, if not specified, default to 20.</param>
            <returns>The comments.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.EncodeXmlCharsPreprocess(System.String)">
            <summary>
            Replaces the special characters in the response xml.
            </summary>
            <example>For example: replaces '&amp;'</example>
            <param name="response">The response(in xml)</param>
            <returns>Preprocessed xml.</returns>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ProcessAsyncCallbackVoidResponse(AMicroblogAPI.Common.AsyncCallResult{System.String},AMicroblogAPI.Common.VoidAsyncCallback)">
            <summary>
            Processes async callback response for return-void type methods.
            </summary>
            <param name="result">The async call result.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ProcessAsyncCallbackResponse``1(AMicroblogAPI.Common.AsyncCallResult{System.String},AMicroblogAPI.Common.AsyncCallback{``0},System.Func{System.String,System.String})">
            <summary>
            Processes async callback response by XML de-serialization.
            </summary>
            <typeparam name="T">The strong type represents the response content.</typeparam>
            <param name="result">The async call result.</param>
            <param name="preprocess">The func to preprocess the response content before XML de-serialization.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ProcessAsyncCallbackResponseCustom``1(AMicroblogAPI.Common.AsyncCallResult{System.String},AMicroblogAPI.Common.AsyncCallback{``0},System.Func{System.String,``0})">
            <summary>
            Processes async callback response by customized logic.
            </summary>
            <typeparam name="T">The strong type represents the response content.</typeparam>
            <param name="result">The async call result.</param>
            <param name="customProcess">The func to preprocess the response content.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ConstructPagedRecordsParams(System.Collections.Generic.ICollection{AMicroblogAPI.Common.ParamPair},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.AMicroblog.ValidateArgument(System.Object,System.String)">
            <summary>
            Validates whether the specified augument is null or not.
            </summary>
            <param name="arg">The argument to validate.</param>
            <param name="argName">The argument name.</param>
        </member>
        <member name="T:AMicroblogAPI.DataContract.StatusInfo">
            <summary>
            Represents the status info.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.CreatedAt">
            <summary>
            Gets or sets the creation time of the status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.ID">
            <summary>
            Gets or sets the stutus id.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.Text">
            <summary>
            Gets or sets the status text.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.Source">
            <summary>
            Gets or sets the source of the status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.Favorited">
            <summary>
            Gets or sets a boolead indicates whether the status is favarited.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.Truncated">
            <summary>
            Gets or sets a boolead indicates whether the status is truncated.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.ReplyTo">
            <summary>
            Gets or sets the mid.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.ReplyToUserId">
            <summary>
            Gets or sets the mid.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.ReplyToUserScreenName">
            <summary>
            Gets or sets the mid.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.ThumbnailPic">
            <summary>
            Gets or sets the thumbnail_pic.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.MiddlePic">
            <summary>
            Gets or sets the bmiddle_pic.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.OriginalPic">
            <summary>
            Gets or sets the original_pic.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.Mid">
            <summary>
            Gets or sets the mid.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.User">
            <summary>
            Gets or sets the user who posts this status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.Geo">
            <summary>
            Gets or sets the user who posts this status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.StatusInfo.RetweetedStatus">
            <summary>
            Gets or sets the status that current status is reposted with.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.OAuthMultiPartHttpPost">
            <summary>
            Posts the multi-part fields in the post body with the OAuth authorization header in the request.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthMultiPartHttpPost.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.OAuthMultiPartHttpPost"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthMultiPartHttpPost.AppendHeaders(System.Net.WebHeaderCollection)">
            <summary>
            See <see cref="M:AMicroblogAPI.HttpRequests.HttpRequest.AppendHeaders(System.Net.WebHeaderCollection)"/>.
            </summary>        
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.TokenObtainRequest">
            <summary>
            Performs a OAuth token-attached HTTP-Get request to the resource identified by the uri with the parameters specifed in ExtraOAuthParams.  
            </summary>
            <remarks>
            The signature is created upon the specified ExtraOAuthParams which is expected to include the OAuth parameters.
            This token secret could be a request token secret or access token secret.
            In this class, OAuth authorization info is conveyed in in HTTP header.
            </remarks>
            <returns>The server response string(UTF8 decoded).</returns>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.TokenObtainRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.TokenObtainRequest"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.TokenObtainRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.TokenObtainRequest"/> with the specified <paramref name="uri"/> amd <paramref name="secret"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
            <param name="secret">The token secret.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.TokenObtainRequest.CollectAllParams">
            <summary>
            Collects all the parameters for the request.
            </summary>
            <returns>The parameters.</returns>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.TokenObtainRequest.ConstructUri">
            <summary>
            Returns only the raw uri. Not appending any query params.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.TokenObtainRequest.AppendHeaders(System.Net.WebHeaderCollection)">
            <summary>
            Appends the OAuth authorization header.
            </summary>
            <param name="headers">The web header collection object.</param>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.TokenObtainRequest.Secret">
            <summary>
            Gets or sets the secret to create signature.
            <remarks>If set, it is request token secret; otherwise, leave empty.</remarks>
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.TokenObtainRequest.Params">
            <summary>
            Gets or sets extra OAuth parameters to be used in the request.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.StatusType">
            <summary>
            Defines types of status.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.StatusType.All">
            <summary>
            Represents all type of status.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.StatusType.Original">
            <summary>
            Represents original type of status.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.StatusType.Picture">
            <summary>
            Represents Picture type of status.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.StatusType.Video">
            <summary>
            Represents Video type of status.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.StatusType.Music">
            <summary>
            Represents Music type of status.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.XmlSerializationHelper">
            <summary>
            Provides utility methods for xml serialization.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.XmlSerializationHelper.LoadFromFile``1(System.String)">
            <summary>
            Deserializes an object (type indicated by <typeparamref name="T"/>) loaded from the specified <paramref name="location"/>. 
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="location">The file location.</param>
            <returns>The object deserialized.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.XmlSerializationHelper.SaveToFile(System.Object,System.String)">
            <summary>
            Serializes the <paramref name="target"/> object into xml and then saves it into the file specified by <paramref name="location"/>.
            </summary>
            <param name="target">The object to serialize.</param>
            <param name="location">The file location.</param>
        </member>
        <member name="M:AMicroblogAPI.Common.XmlSerializationHelper.XmlToObject``1(System.String)">
            <summary>
            Deserializes an object (type indicated by <typeparamref name="T"/>) from the specified <paramref name="xml"/>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="xml">The xml string.</param>
            <returns>The object deserialized.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.XmlSerializationHelper.XmlToObject(System.Type,System.String)">
            <summary>
            Deserializes an object (type indicated by <paramref name="type"/>) from the specified <paramref name="xml"/>.
            </summary>
            <param name="type">The type of the object.</param>
            <param name="xml">The xml string.</param>
            <returns>The object deserialized.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.XmlSerializationHelper.ObjectToXml(System.Object)">
            <summary>
            Serializes the <paramref name="target"/> object into xml.
            </summary>
            <param name="target">The object to serialize.</param>
            <returns>The xml string.</returns>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UserInfo">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.ID">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.ScreenName">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Name">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.DefineAs">
            <summary>
            Gets or sets the markup(note) you set for this user.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Province">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.City">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Location">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Description">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Url">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.ProfileImageUrl">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Domain">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Gender">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.FollowersCount">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.FriendsCount">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.StatusesCount">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.FavouritesCount">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.CreatedAt">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.GeoEnabled">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.AllowAllActMsg">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Following">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.Verified">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserInfo.LatestStatus">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UnreadInfo">
            <summary>
            Represents the unread counters info.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UnreadInfo.NewStatus">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UnreadInfo.Messages">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UnreadInfo.Followers">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UnreadInfo.Mentions">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UnreadInfo.Comments">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.TagInfo">
            <summary>
            Represents a group of tag.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.TagInfo.ID">
            <summary>
            Gets or sets the tag id.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.TagInfo.Value">
            <summary>
            Gets or sets the tag value.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.RelationshipInfo">
            <summary>
            Represents the relationship info of two users.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RelationshipInfo.Source">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RelationshipInfo.Target">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.GeoPoint">
            <summary>
            Represents a geo point.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.GeoPoint.Content">
            <summary>
            Gets or sets the geo content (in string form)
            </summary>
            <example>125.12 253.62</example>
        </member>
        <member name="P:AMicroblogAPI.DataContract.GeoPoint.Lat">
            <summary>
            Gets the latitude.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.GeoPoint.Long">
            <summary>
            Gets the longitude.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Geo">
            <summary>
            Represents a geo.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Geo.Point">
            <summary>
            Gets or sets the geo point.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.OAuthHelper">
            <summary>
            Provides helper methods for OAuth purpose.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.OAuthHelper.GetOAuthBasicParams">
            <summary>
            Gets a collection of OAuth basic parameters(key/value pair).
            <remarks>Not include 'oauth_token' and'oauth_verifier' parameters.</remarks>
            </summary>
            <returns>The collection contains OAuth basic parameters.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.OAuthHelper.ConstructOAuthHeader(System.Collections.Generic.IEnumerable{AMicroblogAPI.Common.ParamPair},System.String,System.String,System.String)">
            <summary>
            Constructs the OAuth authorization header with the specified parameters. See RFC5849 section 3.4.1.3.2.
            <remarks>
            This method does the following:
            1. Creates signature-base-string with the specified <paramref name="uri"/>, <paramref name="parameters"/> and the <paramref name="httpMethod"/>.
            2. Creates signature upon signature-base-string with sign-key (by <see cref="P:AMicroblogAPI.Environment.AppKey"/> and <paramref name="tokenSecret"/>).
            3. Constructs OAuth Authentication header.
            </remarks>
            </summary>
            <param name="parameters">The parameters to used to construct OAuth authorization header(including OAuth protocol params and request-specific params).</param>
            <param name="httpMethod">The HTTP methods, like POST, GET etc.</param>
            <param name="uri">The uri.</param>
            <param name="tokenSecret">The token secret. (Could be a request token secret or access token secret.)</param>
            <returns>The OAuth authorization header string.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.OAuthHelper.ConstructOAuthQueryString(System.Collections.Generic.IEnumerable{AMicroblogAPI.Common.ParamPair},System.String,System.String,System.String)">
            <summary>
            Constructs the OAuth authorization query string. 
            </summary>
            <param name="parameters">The parameters to used to construct OAuth authorization header(including OAuth protocol params and request-specific params).</param>
            <param name="httpMethod">The HTTP methods, like POST, GET etc.</param>
            <param name="uri">The uri.</param>
            <param name="tokenSecret">The token secret. (Could be a request token secret or access token secret.)</param>
            <returns>The OAuth authorization query string.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.OAuthHelper.PreparePostBody(System.String,System.Collections.Generic.IEnumerable{AMicroblogAPI.Common.ParamPair})">
            <summary>
            Prepares a post body string for an access-token-required request.
            </summary>
            <param name="uri">The uri to identify the resource.</param>
            <param name="customPostParams">Additional parameters (in addition to the OAuth parameters) to be included in the post body.</param>
            <returns>The url-encoded post body string.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.OAuthHelper.ConstructPostBody(System.Collections.Generic.IEnumerable{AMicroblogAPI.Common.ParamPair},System.String,System.String)">
            <summary>
            Constructs the OAuth string for the Http-Post request's body.
            </summary>
            <param name="parameters">The parameters to used to construct OAuth authorization header(including OAuth protocol params and request-specific params).</param>
            <param name="uri">The uri to identify the resource.</param>
            <param name="accessTokenSecret">The access token secret.</param>
            <returns>The OAuth string for a HTTP-Post body.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.OAuthHelper.GenerateNonce">
            <summary>
            Generates a random nonce string.
            </summary>
            <returns>A random nonce string.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.OAuthHelper.Sign(System.String,System.String)">
            <summary>
            Signs the specified data (in string format) with HMAC-SHA1 algorithm and the specified <paramref name="signKey"/>.
            </summary>
            <param name="data">The data to be signed.</param>
            <param name="signKey">The sign key.</param>
            <returns>The base64 format signature string.</returns>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UserIDs">
            <summary>
            Represents the user ids.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserIDs.IDs">
            <summary>
            Gets the statuses.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserIDs.NextCursor">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserIDs.PreviousCursor">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Trends">
            <summary>
            Represents a group of trends(topic).
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Trends.Items">
            <summary>
            Gets the trends.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Trends.Time">
            <summary>
            Gets or sets the time of the trend.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Trends.AsOf">
            <summary>
            Gets or sets the as-of of the trend.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.TagIDs">
            <summary>
            Represents a group of tag ids.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.TagIDs.Items">
            <summary>
            Gets the statuses.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.RateLimitStatus">
            <summary>
            Represents the API rate limit status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RateLimitStatus.RemainingHits">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RateLimitStatus.HourlyHits">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RateLimitStatus.ResetTimeInSeconds">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.RateLimitStatus.ResetTime">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.Common.LocalErrorCode">
            <summary>
            Defines the local error codes.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.UnknowError">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.NetworkUnavailable">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.ProcessResponseErrorHandlingFailed">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.ArgumentNotProvided">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.ArgumentInvalid">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.CredentialInvalid">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.ParseResponseFailed">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.AppKeyOrSecretNotProvided">
            <remarks/>
        </member>
        <member name="F:AMicroblogAPI.Common.LocalErrorCode.AccessTokenNotObtained">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.Common.RFC3986Encoder">
            <summary>
            Provides implementation of RFC3986 Percent Encoding mechanism.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.RFC3986Encoder.Encode(System.String)">
            <summary>
            Performs upper case percent encoding against the specified <paramref name="input"/>.
            </summary>
            <param name="input">The string to encode.</param>
            <returns>Encode string.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.RFC3986Encoder.UrlEncode(System.String)">
            <summary>
            Performs lower case percent encoding (url-encodes) on the <paramref name="input"/> as what HttpUtility.UrlEncode does.
            </summary>
            <param name="input">The string to encode.</param>
            <returns>Encode string.</returns>
        </member>
        <member name="M:AMicroblogAPI.Common.RFC3986Encoder.ToUnixTime(System.DateTime)">
            <summary>
            Gets the seconds from 1970/1/1.
            </summary>
            <param name="time">The time to calculate from.</param>
            <returns>The seconds.</returns>
        </member>
        <member name="T:AMicroblogAPI.DataContract.CounterInfo">
            <summary>
            Represents a counter info of a status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CounterInfo.StatusID">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CounterInfo.Comments">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CounterInfo.Forwards">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.CounterType">
            <summary>
            Represents the type of counters.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.CounterType.Comment">
            <summary>
            Represents comment counter.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.CounterType.Mention">
            <summary>
            Represents mention counter.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.CounterType.Message">
            <summary>
            Represents message counter.
            </summary>
        </member>
        <member name="F:AMicroblogAPI.DataContract.CounterType.Follower">
            <summary>
            Represents follower counter.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.ResponseErrorData">
            <summary>
            Represents the contextual data of a HTTP response error.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorData.RequestUri">
            <summary>
            Gets the request uri (absolute url, probably with query strings if it's not a POST request).
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorData.ErrorCode">
            <summary>
            Gets the error code returned by server.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorData.Exception">
            <summary>
            Gets The exception of <see cref="T:AMicroblogAPI.Common.AMicroblogException"/> type.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorData.HttpMethod">
            <summary>
            Gets the rquest method.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorData.ContentType">
            <summary>
            Gets the rquest content type.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.IResponseErrorHandler">
            <summary>
            Defines methods to handle HTTP response error. 
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.IResponseErrorHandler.Handle(AMicroblogAPI.Common.ResponseErrorData)">
            <summary>
            Handles the response error with the <paramref name="errorData"/>.
            </summary>
            <param name="errorData">The contextual data of the response error.</param>
        </member>
        <member name="T:AMicroblogAPI.Common.AMicroblogAPIConfigurationSection">
            <summary>
            Represents the configuration section of AMicroblogAPI.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.AMicroblogAPIConfigurationSection.ResponseErrorHandlingConfig">
            <summary>
            Gets or sets the response error handling configuration.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.ResponseErrorHandlingConfiguration">
            <summary>
            Represents the response error handling configuration.
            </summary>
        </member>
        <member name="M:AMicroblogAPI.Common.ResponseErrorHandlingConfiguration.CreateNewElement">
            <remarks/>
        </member>
        <member name="M:AMicroblogAPI.Common.ResponseErrorHandlingConfiguration.GetElementKey(System.Configuration.ConfigurationElement)">
            <remarks/>
        </member>
        <member name="P:AMicroblogAPI.Common.ResponseErrorHandlingConfiguration.Enabled">
            <summary>
            Gets or sets a boolean value indicating whether the response error handling is enabled.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.HandlerConfigurationElement">
            <summary>
            Represents the response error handler configuration.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.HandlerConfigurationElement.Type">
            <summary>
            Gets or sets the type property.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.HandlerConfigurationElement.ErrorCode">
            <summary>
            Gets or sets the error code pattern property.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.HandlerConfiguration">
            <summary>
            Represents the response analyzed error handler configuration.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.HttpRequests.OAuthHttpPost">
            <summary>
            Performs a OAuth token-attached Http-Post request to the resource identified by the uri with the combination of OAuth parameters and the specified additionalParams(optional).
            </summary>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthHttpPost.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.OAuthHttpPost"/> with the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
        </member>
        <member name="M:AMicroblogAPI.HttpRequests.OAuthHttpPost.#ctor(System.String,System.Collections.Generic.IList{AMicroblogAPI.Common.ParamPair})">
            <summary>
            Initializes a new instance of <see cref="T:AMicroblogAPI.HttpRequests.OAuthHttpPost"/> with the specified <paramref name="uri"/> and <paramref name="additionalParams"/>.
            </summary>
            <param name="uri">The uri to identify a resource in the remote server.</param>
            <param name="additionalParams">Additional data to post.</param>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.OAuthHttpPost.Params">
            <summary>
            Gets or sets the custom post data(in <c>ParamPair</c> format, non-urlencoded).
            <remarks>Do not UrlEncode the <c>ParamPair</c>, it is done inside this method.</remarks>
            </summary>
        </member>
        <member name="P:AMicroblogAPI.HttpRequests.OAuthHttpPost.PostData">
            <summary>
            Gets the data to post.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Users">
            <summary>
            Represents a group of users.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Users.Items">
            <summary>
            Gets the users.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Users.NextCursor">
            <summary>
            Gets or sets the next page cursor.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Users.PreviousCursor">
            <summary>
            Gets or sets the previous page cursor.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.DirectMessageInfo">
            <summary>
            Represents the direct message.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.CreatedAt">
            <summary>
            Gets or sets the creation time of the direct message.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.ID">
            <summary>
            Gets or sets the direct message id.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.Text">
            <summary>
            Gets or sets the direct message's text.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.SenderID">
            <summary>
            Gets or sets the sender ID of the direct message.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.RecipientID">
            <summary>
            Gets or sets the receiver ID of the direct message.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.SenderScreenName">
            <summary>
            Gets or sets the sender's screen name.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.RecipientScreenName">
            <summary>
            Gets or sets the receiver's screen name.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.Sender">
            <summary>
            Gets or sets the sender of the direct message.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.DirectMessageInfo.Recipient">
            <summary>
            Gets or sets the recipient of the direct message.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Source">
            <summary>
            Represents the source that a status is from.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Source.Content">
            <summary>
            Gets or sets the content of the source object.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.OAuthRequestToken">
            <summary>
            Represents the OAuth requst token.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.OAuthRequestToken.Token">
            <summary>
            Gets or sets the token field.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.OAuthRequestToken.Secret">
            <summary>
            Gets or sets the token secret field.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.OAuthAccessToken">
            <summary>
            Represents the OAuth access token.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.Common.OAuthAccessToken.UserID">
            <summary>
            Gets or sets the user id field.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Urls">
            <summary>
            Represents a group of urls.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Urls.Items">
            <summary>
            Gets the statuses.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Counters">
            <summary>
            Represents a group of counters.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Counters.Items">
            <summary>
            Gets the counter.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.CommentInfo">
            <summary>
            Represents a comment.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CommentInfo.CreatedAt">
            <summary>
            Gets or sets the creation time of the status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CommentInfo.ID">
            <summary>
            Gets or sets the stutus id.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CommentInfo.Text">
            <summary>
            Gets or sets the status text.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CommentInfo.Source">
            <summary>
            Gets or sets the source of the status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CommentInfo.User">
            <summary>
            Gets or sets the user who posts this comment.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.CommentInfo.Status">
            <summary>
            Gets or sets the status which this comment comments to.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.Common.Constants">
            <summary>
            Defines constants used in AMicroBlogAPI.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.Tags">
            <summary>
            Represents a group of tag.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.Tags.Items">
            <summary>
            Gets the statuses.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UpdateStatusInfo">
            <summary>
            Represents the update status info.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusInfo.Status">
            <summary>
            Gets or sets the status text.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusInfo.ReplyTo">
            <summary>
            Gets or sets the id of a replying status.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusInfo.Latitude">
            <summary>
            纬度, 有效范围：-90.0到+90.0，+表示北纬。 
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusInfo.Longitude">
            <summary>
            经度, 有效范围：-180.0到+180.0，+表示东经。
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusInfo.Annotations">
            <summary>
            Gets or sets a json format string for annotation.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UserSuggestions">
            <summary>
            Represents a set of user suggestion.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UserSuggestions.Items">
            <summary>
            Gets the suggestions.
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.UpdateStatusWithPicInfo">
            <summary>
            Represents the update status with pic.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusWithPicInfo.Status">
            <summary>
            The status text.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusWithPicInfo.Pic">
            <summary>
            The location of pic file.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusWithPicInfo.Latitude">
            <summary>
            纬度, 有效范围：-90.0到+90.0，+表示北纬。 
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.UpdateStatusWithPicInfo.Longitude">
            <summary>
            经度, 有效范围：-180.0到+180.0，+表示东经。
            </summary>
        </member>
        <member name="T:AMicroblogAPI.DataContract.BooleanResultInfo">
            <summary>
            Represents a boolean result.
            </summary>
        </member>
        <member name="P:AMicroblogAPI.DataContract.BooleanResultInfo.Value">
            <remarks/>
        </member>
        <member name="T:AMicroblogAPI.DataContract.ExistsFriendshipResultInfo">
            <summary>
            Represents a friendship existence result.
            </summary>
        </member>
    </members>
</doc>
