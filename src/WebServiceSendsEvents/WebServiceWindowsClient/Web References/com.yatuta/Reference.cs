//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1434.
// 
#pragma warning disable 1591

namespace YatutaServiceWindowsClient.com.yatuta {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="YatutaWebServiceSoap", Namespace="http://yatuta.com/webservices/")]
    public partial class YatutaWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubtractOperationCompleted;
        
        private System.Threading.SendOrPostCallback MultiplyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DivideOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAliveIntervalSecOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAliveIntervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersAroundOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public YatutaWebService() {
            this.Url = global::YatutaServiceWindowsClient.Properties.Settings.Default.YatutaServiceWindowsClient_com_yatuta_YatutaWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event AddCompletedEventHandler AddCompleted;
        
        /// <remarks/>
        public event SubtractCompletedEventHandler SubtractCompleted;
        
        /// <remarks/>
        public event MultiplyCompletedEventHandler MultiplyCompleted;
        
        /// <remarks/>
        public event DivideCompletedEventHandler DivideCompleted;
        
        /// <remarks/>
        public event StartSessionCompletedEventHandler StartSessionCompleted;
        
        /// <remarks/>
        public event StopSessionCompletedEventHandler StopSessionCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event SetAliveIntervalSecCompletedEventHandler SetAliveIntervalSecCompleted;
        
        /// <remarks/>
        public event GetAliveIntervalCompletedEventHandler GetAliveIntervalCompleted;
        
        /// <remarks/>
        public event ReportLocationCompletedEventHandler ReportLocationCompleted;
        
        /// <remarks/>
        public event GetUsersAroundCompletedEventHandler GetUsersAroundCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event SetUserInfoCompletedEventHandler SetUserInfoCompleted;
        
        /// <remarks/>
        public event UpdateUserInfoCompletedEventHandler UpdateUserInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/HelloWorld", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/Add", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Add(int a, int b) {
            object[] results = this.Invoke("Add", new object[] {
                        a,
                        b});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddAsync(int a, int b) {
            this.AddAsync(a, b, null);
        }
        
        /// <remarks/>
        public void AddAsync(int a, int b, object userState) {
            if ((this.AddOperationCompleted == null)) {
                this.AddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOperationCompleted);
            }
            this.InvokeAsync("Add", new object[] {
                        a,
                        b}, this.AddOperationCompleted, userState);
        }
        
        private void OnAddOperationCompleted(object arg) {
            if ((this.AddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCompleted(this, new AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/Subtract", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public float Subtract(float A, float B) {
            object[] results = this.Invoke("Subtract", new object[] {
                        A,
                        B});
            return ((float)(results[0]));
        }
        
        /// <remarks/>
        public void SubtractAsync(float A, float B) {
            this.SubtractAsync(A, B, null);
        }
        
        /// <remarks/>
        public void SubtractAsync(float A, float B, object userState) {
            if ((this.SubtractOperationCompleted == null)) {
                this.SubtractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtractOperationCompleted);
            }
            this.InvokeAsync("Subtract", new object[] {
                        A,
                        B}, this.SubtractOperationCompleted, userState);
        }
        
        private void OnSubtractOperationCompleted(object arg) {
            if ((this.SubtractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubtractCompleted(this, new SubtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/Multiply", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public float Multiply(float A, float B) {
            object[] results = this.Invoke("Multiply", new object[] {
                        A,
                        B});
            return ((float)(results[0]));
        }
        
        /// <remarks/>
        public void MultiplyAsync(float A, float B) {
            this.MultiplyAsync(A, B, null);
        }
        
        /// <remarks/>
        public void MultiplyAsync(float A, float B, object userState) {
            if ((this.MultiplyOperationCompleted == null)) {
                this.MultiplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMultiplyOperationCompleted);
            }
            this.InvokeAsync("Multiply", new object[] {
                        A,
                        B}, this.MultiplyOperationCompleted, userState);
        }
        
        private void OnMultiplyOperationCompleted(object arg) {
            if ((this.MultiplyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MultiplyCompleted(this, new MultiplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/Divide", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public float Divide(float A, float B) {
            object[] results = this.Invoke("Divide", new object[] {
                        A,
                        B});
            return ((float)(results[0]));
        }
        
        /// <remarks/>
        public void DivideAsync(float A, float B) {
            this.DivideAsync(A, B, null);
        }
        
        /// <remarks/>
        public void DivideAsync(float A, float B, object userState) {
            if ((this.DivideOperationCompleted == null)) {
                this.DivideOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDivideOperationCompleted);
            }
            this.InvokeAsync("Divide", new object[] {
                        A,
                        B}, this.DivideOperationCompleted, userState);
        }
        
        private void OnDivideOperationCompleted(object arg) {
            if ((this.DivideCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DivideCompleted(this, new DivideCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/StartSession", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartSession(System.Guid sessionID, UserID userID) {
            this.Invoke("StartSession", new object[] {
                        sessionID,
                        userID});
        }
        
        /// <remarks/>
        public void StartSessionAsync(System.Guid sessionID, UserID userID) {
            this.StartSessionAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void StartSessionAsync(System.Guid sessionID, UserID userID, object userState) {
            if ((this.StartSessionOperationCompleted == null)) {
                this.StartSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionOperationCompleted);
            }
            this.InvokeAsync("StartSession", new object[] {
                        sessionID,
                        userID}, this.StartSessionOperationCompleted, userState);
        }
        
        private void OnStartSessionOperationCompleted(object arg) {
            if ((this.StartSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/StopSession", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StopSession(System.Guid sessionID) {
            this.Invoke("StopSession", new object[] {
                        sessionID});
        }
        
        /// <remarks/>
        public void StopSessionAsync(System.Guid sessionID) {
            this.StopSessionAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void StopSessionAsync(System.Guid sessionID, object userState) {
            if ((this.StopSessionOperationCompleted == null)) {
                this.StopSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopSessionOperationCompleted);
            }
            this.InvokeAsync("StopSession", new object[] {
                        sessionID}, this.StopSessionOperationCompleted, userState);
        }
        
        private void OnStopSessionOperationCompleted(object arg) {
            if ((this.StopSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/Login", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserID Login(string username, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        username,
                        password});
            return ((UserID)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        username,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/Logout", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logout(UserID userID) {
            this.Invoke("Logout", new object[] {
                        userID});
        }
        
        /// <remarks/>
        public void LogoutAsync(UserID userID) {
            this.LogoutAsync(userID, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(UserID userID, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        userID}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/SetAliveIntervalSec", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAliveIntervalSec(System.Guid sessionID, int sec) {
            this.Invoke("SetAliveIntervalSec", new object[] {
                        sessionID,
                        sec});
        }
        
        /// <remarks/>
        public void SetAliveIntervalSecAsync(System.Guid sessionID, int sec) {
            this.SetAliveIntervalSecAsync(sessionID, sec, null);
        }
        
        /// <remarks/>
        public void SetAliveIntervalSecAsync(System.Guid sessionID, int sec, object userState) {
            if ((this.SetAliveIntervalSecOperationCompleted == null)) {
                this.SetAliveIntervalSecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAliveIntervalSecOperationCompleted);
            }
            this.InvokeAsync("SetAliveIntervalSec", new object[] {
                        sessionID,
                        sec}, this.SetAliveIntervalSecOperationCompleted, userState);
        }
        
        private void OnSetAliveIntervalSecOperationCompleted(object arg) {
            if ((this.SetAliveIntervalSecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAliveIntervalSecCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/GetAliveInterval", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAliveInterval(System.Guid sessionID) {
            object[] results = this.Invoke("GetAliveInterval", new object[] {
                        sessionID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAliveIntervalAsync(System.Guid sessionID) {
            this.GetAliveIntervalAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAliveIntervalAsync(System.Guid sessionID, object userState) {
            if ((this.GetAliveIntervalOperationCompleted == null)) {
                this.GetAliveIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAliveIntervalOperationCompleted);
            }
            this.InvokeAsync("GetAliveInterval", new object[] {
                        sessionID}, this.GetAliveIntervalOperationCompleted, userState);
        }
        
        private void OnGetAliveIntervalOperationCompleted(object arg) {
            if ((this.GetAliveIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAliveIntervalCompleted(this, new GetAliveIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/ReportLocation", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReportLocation(System.Guid sessionID, System.DateTime time, GpsLocation location) {
            this.Invoke("ReportLocation", new object[] {
                        sessionID,
                        time,
                        location});
        }
        
        /// <remarks/>
        public void ReportLocationAsync(System.Guid sessionID, System.DateTime time, GpsLocation location) {
            this.ReportLocationAsync(sessionID, time, location, null);
        }
        
        /// <remarks/>
        public void ReportLocationAsync(System.Guid sessionID, System.DateTime time, GpsLocation location, object userState) {
            if ((this.ReportLocationOperationCompleted == null)) {
                this.ReportLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportLocationOperationCompleted);
            }
            this.InvokeAsync("ReportLocation", new object[] {
                        sessionID,
                        time,
                        location}, this.ReportLocationOperationCompleted, userState);
        }
        
        private void OnReportLocationOperationCompleted(object arg) {
            if ((this.ReportLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/GetUsersAround", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public User[] GetUsersAround(System.Guid sessionID, uint distanceMeters) {
            object[] results = this.Invoke("GetUsersAround", new object[] {
                        sessionID,
                        distanceMeters});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAroundAsync(System.Guid sessionID, uint distanceMeters) {
            this.GetUsersAroundAsync(sessionID, distanceMeters, null);
        }
        
        /// <remarks/>
        public void GetUsersAroundAsync(System.Guid sessionID, uint distanceMeters, object userState) {
            if ((this.GetUsersAroundOperationCompleted == null)) {
                this.GetUsersAroundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersAroundOperationCompleted);
            }
            this.InvokeAsync("GetUsersAround", new object[] {
                        sessionID,
                        distanceMeters}, this.GetUsersAroundOperationCompleted, userState);
        }
        
        private void OnGetUsersAroundOperationCompleted(object arg) {
            if ((this.GetUsersAroundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersAroundCompleted(this, new GetUsersAroundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/SendMessage", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMessage(System.Guid sessionID, UserID userIdTo, string message) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        sessionID,
                        userIdTo,
                        message});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(System.Guid sessionID, UserID userIdTo, string message) {
            this.SendMessageAsync(sessionID, userIdTo, message, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(System.Guid sessionID, UserID userIdTo, string message, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        sessionID,
                        userIdTo,
                        message}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/GetUserInfo", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserInfo GetUserInfo(System.Guid sessionID) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        sessionID});
            return ((UserInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(System.Guid sessionID) {
            this.GetUserInfoAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(System.Guid sessionID, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        sessionID}, this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/SetUserInfo", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUserInfo(System.Guid sessionID, UserInfo userInfo) {
            object[] results = this.Invoke("SetUserInfo", new object[] {
                        sessionID,
                        userInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserInfoAsync(System.Guid sessionID, UserInfo userInfo) {
            this.SetUserInfoAsync(sessionID, userInfo, null);
        }
        
        /// <remarks/>
        public void SetUserInfoAsync(System.Guid sessionID, UserInfo userInfo, object userState) {
            if ((this.SetUserInfoOperationCompleted == null)) {
                this.SetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserInfoOperationCompleted);
            }
            this.InvokeAsync("SetUserInfo", new object[] {
                        sessionID,
                        userInfo}, this.SetUserInfoOperationCompleted, userState);
        }
        
        private void OnSetUserInfoOperationCompleted(object arg) {
            if ((this.SetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserInfoCompleted(this, new SetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yatuta.com/webservices/UpdateUserInfo", RequestNamespace="http://yatuta.com/webservices/", ResponseNamespace="http://yatuta.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateUserInfo(System.Guid sessionID, UserInfo userInfo) {
            object[] results = this.Invoke("UpdateUserInfo", new object[] {
                        sessionID,
                        userInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserInfoAsync(System.Guid sessionID, UserInfo userInfo) {
            this.UpdateUserInfoAsync(sessionID, userInfo, null);
        }
        
        /// <remarks/>
        public void UpdateUserInfoAsync(System.Guid sessionID, UserInfo userInfo, object userState) {
            if ((this.UpdateUserInfoOperationCompleted == null)) {
                this.UpdateUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateUserInfo", new object[] {
                        sessionID,
                        userInfo}, this.UpdateUserInfoOperationCompleted, userState);
        }
        
        private void OnUpdateUserInfoOperationCompleted(object arg) {
            if ((this.UpdateUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserInfoCompleted(this, new UpdateUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://yatuta.com/webservices/")]
    public partial class UserID {
        
        private int _UserIDField;
        
        /// <remarks/>
        public int _UserID {
            get {
                return this._UserIDField;
            }
            set {
                this._UserIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://yatuta.com/webservices/")]
    public partial class UserInfo {
        
        private string _EmailField;
        
        private string _PhoneField;
        
        private string _CountryField;
        
        private string[] _LanguagesField;
        
        private string[] _HobbiesField;
        
        private string _PositionNameField;
        
        /// <remarks/>
        public string _Email {
            get {
                return this._EmailField;
            }
            set {
                this._EmailField = value;
            }
        }
        
        /// <remarks/>
        public string _Phone {
            get {
                return this._PhoneField;
            }
            set {
                this._PhoneField = value;
            }
        }
        
        /// <remarks/>
        public string _Country {
            get {
                return this._CountryField;
            }
            set {
                this._CountryField = value;
            }
        }
        
        /// <remarks/>
        public string[] _Languages {
            get {
                return this._LanguagesField;
            }
            set {
                this._LanguagesField = value;
            }
        }
        
        /// <remarks/>
        public string[] _Hobbies {
            get {
                return this._HobbiesField;
            }
            set {
                this._HobbiesField = value;
            }
        }
        
        /// <remarks/>
        public string _PositionName {
            get {
                return this._PositionNameField;
            }
            set {
                this._PositionNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://yatuta.com/webservices/")]
    public partial class User {
        
        private UserID _UserIDField;
        
        private string _UserDescriptionField;
        
        private GpsLocation _LastReportedLocationField;
        
        private System.DateTime _TimeOfLastReportedLocationField;
        
        private string _LocationNameField;
        
        private string _MessageField;
        
        /// <remarks/>
        public UserID _UserID {
            get {
                return this._UserIDField;
            }
            set {
                this._UserIDField = value;
            }
        }
        
        /// <remarks/>
        public string _UserDescription {
            get {
                return this._UserDescriptionField;
            }
            set {
                this._UserDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public GpsLocation _LastReportedLocation {
            get {
                return this._LastReportedLocationField;
            }
            set {
                this._LastReportedLocationField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime _TimeOfLastReportedLocation {
            get {
                return this._TimeOfLastReportedLocationField;
            }
            set {
                this._TimeOfLastReportedLocationField = value;
            }
        }
        
        /// <remarks/>
        public string _LocationName {
            get {
                return this._LocationNameField;
            }
            set {
                this._LocationNameField = value;
            }
        }
        
        /// <remarks/>
        public string _Message {
            get {
                return this._MessageField;
            }
            set {
                this._MessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://yatuta.com/webservices/")]
    public partial class GpsLocation {
        
        private double _LatitudeDegField;
        
        private double _LongitudeDegField;
        
        private double _ElevationMetersField;
        
        /// <remarks/>
        public double _LatitudeDeg {
            get {
                return this._LatitudeDegField;
            }
            set {
                this._LatitudeDegField = value;
            }
        }
        
        /// <remarks/>
        public double _LongitudeDeg {
            get {
                return this._LongitudeDegField;
            }
            set {
                this._LongitudeDegField = value;
            }
        }
        
        /// <remarks/>
        public double _ElevationMeters {
            get {
                return this._ElevationMetersField;
            }
            set {
                this._ElevationMetersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void AddCompletedEventHandler(object sender, AddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void SubtractCompletedEventHandler(object sender, SubtractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubtractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubtractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void MultiplyCompletedEventHandler(object sender, MultiplyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MultiplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MultiplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void DivideCompletedEventHandler(object sender, DivideCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DivideCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DivideCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void StartSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void StopSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void SetAliveIntervalSecCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetAliveIntervalCompletedEventHandler(object sender, GetAliveIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAliveIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAliveIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void ReportLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetUsersAroundCompletedEventHandler(object sender, GetUsersAroundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersAroundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersAroundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void SetUserInfoCompletedEventHandler(object sender, SetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void UpdateUserInfoCompletedEventHandler(object sender, UpdateUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591